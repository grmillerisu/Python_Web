from struct import pack as s_pack
from struct import unpack as s_unpack
from messaging import uids
from messaging import Position3D
##
 # This file is automatically generated. Do not hand modify.
 # @file Gps.py
 # @author Garrett Miller
 # @date September 7 2019

class Gps:
   def __init__(self):
      self.position = Position3D()
      self.age = 0
      self.sats = -1
   # Gps init constructor

   def getSizeWithHeader(self):
      size = 0
      # header
      size += 4
      size += self.getSize()
      return size
   # end def getSizeWithHeader

   def getSize(self):
      size = 0
      size += self.position.getSize()
      # age
      size += 8
      # sats
      size += 2
      return size
   # end def getSize

   def pack(self):
      bytes = b''
      # pack position
      bytes += self.position.pack()
      # pack age
      bytes += s_pack("Q",self.age)
      # pack sats
      bytes += s_pack("h",self.sats)
      return bytes
   # end def pack

   def unpack(self,bytearray):
      lower_offset = 0
      upper_offset = 0
      # unpack position
      upper_offset += self.position.getSize()
      bytes = bytearray[lower_offset:upper_offset]
      lower_offset = upper_offset
      self.position.unpack(bytes)
      # unpack age
      upper_offset += 8
      bytes = bytearray[lower_offset:upper_offset]
      lower_offset = upper_offset
      self.age = s_unpack("Q",bytes)[0]
      # unpack sats
      upper_offset += 2
      bytes = bytearray[lower_offset:upper_offset]
      lower_offset = upper_offset
      self.sats = s_unpack("h",bytes)[0]
   # end def unpack

   def packHeader(self):
      uid = uids.Gps_Uid
      # pack uid
      return s_pack("I",uid)
   # end def packHeader


   def packWithHeader(self):
      buff = b''
      buff += self.packHeader()
      buff += self.pack()
      return buff
   # end def packWithHeader

   def toString(self):
      str = ""
      spaces = 0
      spaces += 3
      str += " " * spaces + "position: \n" + self.position.toStringSpaces(spaces+3)
      str += " " * spaces + "age = %10d" % self.age + ", "
      str += " " * spaces + "sats = %3d" % self.sats
      return str
   # end def

   def toStringCsv(self):
      str = ""
      str += self.position.toStringCsv() + ", "
      str += "age, %10d" % self.age + ", "
      str += "sats, %3d" % self.sats
      return str
   # end def

   def toStringSpaces(self,spaces):
      str = ""
      str += " " * spaces + "position: " + self.position.toStringSpaces(spaces+3)
      str += " " * spaces + "age = %10d" % self.age + ", "
      str += " " * spaces + "sats = %3d" % self.sats
      return str

   def increment(self):
      self.position.increment()
      self.age += 2
      self.sats += 1
   # end def
# end class