from struct import pack as s_pack
from struct import unpack as s_unpack
from messaging import uids
##
 # This file is automatically generated. Do not hand modify.
 # @file Acceleration.py
 # @author Garrett Miller
 # @date September 7 2019

class Acceleration:
   def __init__(self):
      self.accx = 0.0
      self.accy = 0.0
      self.accz = 0.0
   # Acceleration init constructor

   def getSizeWithHeader(self):
      size = 0
      # header
      size += 4
      size += self.getSize()
      return size
   # end def getSizeWithHeader

   def getSize(self):
      size = 0
      # accx
      size += 8
      # accy
      size += 8
      # accz
      size += 8
      return size
   # end def getSize

   def pack(self):
      bytes = b''
      # pack accx
      bytes += s_pack("d",self.accx)
      # pack accy
      bytes += s_pack("d",self.accy)
      # pack accz
      bytes += s_pack("d",self.accz)
      return bytes
   # end def pack

   def unpack(self,bytearray):
      lower_offset = 0
      upper_offset = 0
      # unpack accx
      upper_offset += 8
      bytes = bytearray[lower_offset:upper_offset]
      lower_offset = upper_offset
      self.accx = s_unpack("d",bytes)[0]
      # unpack accy
      upper_offset += 8
      bytes = bytearray[lower_offset:upper_offset]
      lower_offset = upper_offset
      self.accy = s_unpack("d",bytes)[0]
      # unpack accz
      upper_offset += 8
      bytes = bytearray[lower_offset:upper_offset]
      lower_offset = upper_offset
      self.accz = s_unpack("d",bytes)[0]
   # end def unpack

   def packHeader(self):
      uid = uids.Acceleration_Uid
      # pack uid
      return s_pack("I",uid)
   # end def packHeader


   def packWithHeader(self):
      buff = b''
      buff += self.packHeader()
      buff += self.pack()
      return buff
   # end def packWithHeader

   def toString(self):
      str = ""
      spaces = 0
      spaces += 3
      str += " " * spaces + "accx = %8.4lf" % self.accx + ", "
      str += " " * spaces + "accy = %8.4lf" % self.accy + ", "
      str += " " * spaces + "accz = %8.4lf" % self.accz
      return str
   # end def

   def toStringCsv(self):
      str = ""
      str += "accx, %8.4lf" % self.accx + ", "
      str += "accy, %8.4lf" % self.accy + ", "
      str += "accz, %8.4lf" % self.accz
      return str
   # end def

   def toStringSpaces(self,spaces):
      str = ""
      str += " " * spaces + "accx = %8.4lf" % self.accx + ", "
      str += " " * spaces + "accy = %8.4lf" % self.accy + ", "
      str += " " * spaces + "accz = %8.4lf" % self.accz
      return str

   def increment(self):
      self.accx += 0.1
      self.accy += 0.2
      self.accz += 0.3
   # end def
# end class
